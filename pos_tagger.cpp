/* program to input a chunk of text/ordered list of words and assign the Most Likely Part of Speech to each word */
/* the HMM used is already generated by freq_gen and stored in the following files:
	1. Frequency Data : corpFreqData.freq
	2. Tag Count : tags_count
	3. Transition Count : trans_count

This program simply implements the Viterbi Algorithm using the above HMM.
*/

#include "pos_tagger_func.h"
using namespace std;

map<vector<string>, int> wordlist;
map<string, int> tag_ids;
vector<string> tag_names;
string hmm_folder = "hmm_data_oanc/";
int tag_count[NO_TAGS];
int transitions[NO_TAGS][NO_TAGS];
int **emmissions;
int no_corp_words;
vector<vector<string> > text_words;
vector<vector<string> >::iterator text_it;

int main(int argc, char **argv){
	init();
	string word;
	vector<string> sentence;
	int total_text_words = 0;
	// push all words of the text in 'text_words'
	while(cin >> word){
		if(word.at(word.size()-1) == '.'){
			sentence.push_back(word.substr(0,word.size()-1));
			text_words.push_back(sentence);
			total_text_words += sentence.size();
			sentence.clear();
		}
		else
			sentence.push_back(word);
	}
	if(!sentence.empty()){
		text_words.push_back(sentence);
		total_text_words += sentence.size();
		sentence.clear();
	}
	
	gen_HMM();
	cerr << total_text_words << "\n";

	for (text_it = text_words.begin(); text_it != text_words.end(); text_it++){
		// allocate the appropriate memory to emmissions which stores emmission count of all the words appearing in the given text
		emmissions = new int*[text_it->size()];
		for (int loopVar = 0; loopVar < text_it->size(); loopVar++)
			emmissions[loopVar] = new int[NO_TAGS];
		
		extract_emmissions();
		int *mle_tags = tag_text();		// local variable mle_tags;
	
		cout << "The text with the corresponding POS Tags : \n\n";
		for ( int word_no = 0; word_no < text_it->size(); word_no++){
			cerr << text_it->at(word_no) << TAG_SEPARATOR << tag_names[mle_tags[word_no]] << " ";
		}
		cerr << "\t";
		
		// deallocate emmissions
		for (int loopVar = 0; loopVar < text_it->size(); loopVar++)
			delete[] emmissions[loopVar];
		delete[] emmissions;
	}
	//cout << argc << " : " << argv[1] << "\n";
	return 0;
}
